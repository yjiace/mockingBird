{
  "apiDefinitions": [
    {
      "id": "get-users",
      "path": "/api/user",
      "method": "GET",
      "summary": "获取用户列表",
      "description": "获取系统中所有用户的列表信息，支持分页和筛选。",
      "parameters": {
        "query": [
          { "name": "page", "type": "integer", "required": false, "description": "页码，默认为1" },
          { "name": "size", "type": "integer", "required": false, "description": "每页数量，默认为10" },
          { "name": "name", "type": "String", "required": false, "description": "姓名查询" },
          { "name": "email", "type": "String", "required": false, "description": "邮箱查询" },
          { "name": "mobile", "type": "String", "required": false, "description": "手机号查询" }
        ]
      },
      "responses": {
        "200": {
          "description": "成功返回用户列表",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"results\": [],\n    \"total\": 100,\n    \"page\": 1,\n    \"size\": 10\n  }\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "// HTTP 请求\nfetch('/api/user?page=1&size=10')\n  .then(response => response.json())\n  .then(data => console.log(data));",
          "axios": "// HTTP 请求 (Axios)\nimport axios from 'axios';\n\naxios.get('/api/user', {\n  params: {\n    page: 1,\n    size: 10\n  }\n})\n.then(response => console.log(response.data))\n.catch(error => console.error(error));",
          "jquery": "// HTTP 请求 (jQuery)\n$.ajax({\n  url: '/api/user',\n  method: 'GET',\n  data: {\n    page: 1,\n    size: 10\n  },\n  success: function(data) {\n    console.log(data);\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\n\nOkHttpClient client = new OkHttpClient();\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/user?page=1&size=10\")\n    .addHeader(\"Accept\", \"application/json\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);",
          "spring": "// HTTP 请求 (Spring RestTemplate)\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.http.ResponseEntity;\n\nRestTemplate restTemplate = new RestTemplate();\nString url = \"https://yourdomain.com/api/user?page=1&size=10\";\nResponseEntity<String> response = restTemplate.getForEntity(url, String.class);\nSystem.out.println(response.getBody());",
          "httpclient": "// HTTP 请求 (Apache HttpClient)\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpGet request = new HttpGet(\"https://yourdomain.com/api/user?page=1&size=10\");\nrequest.addHeader(\"Accept\", \"application/json\");\n\nString response = EntityUtils.toString(client.execute(request).getEntity());\nSystem.out.println(response);\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"https://yourdomain.com/api/user?page=1&size=10\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}",
          "fasthttp": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"github.com/valyala/fasthttp\"\n)\n\nfunc main() {\n    req := fasthttp.AcquireRequest()\n    resp := fasthttp.AcquireResponse()\n    defer fasthttp.ReleaseRequest(req)\n    defer fasthttp.ReleaseResponse(resp)\n    \n    req.SetRequestURI(\"https://yourdomain.com/api/user?page=1&size=10\")\n    \n    err := fasthttp.Do(req, resp)\n    if err != nil {\n        panic(err)\n    }\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}"
        },
        "php": {
          "curl": "<?php\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user?page=1&size=10');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Accept: application/json'\n]);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->get('https://yourdomain.com/api/user', [\n    'query' => [\n        'page' => 1,\n        'size' => 10\n    ],\n    'headers' => [\n        'Accept' => 'application/json'\n    ]\n]);\n\necho $response->getBody();",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('GET', 'https://yourdomain.com/api/user', [\n    'query' => [\n        'page' => 1,\n        'size' => 10\n    ],\n    'headers' => [\n        'Accept' => 'application/json'\n    ]\n]);\n\necho $response->getContent();"
        },
        "python": {
          "requests": "import requests\n\nresponse = requests.get('https://yourdomain.com/api/user', {\n    'page': 1,\n    'size': 10\n})\nprint(response.json())",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    response = client.get('https://yourdomain.com/api/user', params={\n        'page': 1,\n        'size': 10\n    })\n    print(response.json())",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('https://yourdomain.com/api/user', params={\n            'page': 1,\n            'size': 10\n        }) as response:\n            data = await response.json()\n            print(data)\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X GET \"https://yourdomain.com/api/user?page=1&size=10\" \\\n  -H \"Accept: application/json\"",
          "verbose": "curl -X GET \"https://yourdomain.com/api/user?page=1&size=10\" \\\n  -H \"Accept: application/json\" \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    },
    {
      "id": "get-user",
      "path": "/api/user/{id}",
      "method": "GET",
      "summary": "获取用户详情",
      "description": "根据用户ID获取特定用户的详细信息。",
      "parameters": {
        "path": [
          { "name": "id", "type": "integer", "required": true, "description": "用户ID" }
        ]
      },
      "responses": {
        "200": {
          "description": "成功返回用户信息",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"张三\",\n    \"age\": 25,\n    \"email\": \"zhangsan@example.com\"\n  }\n}"
        },
        "404": {
          "description": "用户不存在",
          "example": "{\n  \"code\": 404,\n  \"message\": \"User not found\",\n  \"data\": null\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "fetch('/api/user/123')\n  .then(response => response.json())\n  .then(data => console.log(data));",
          "axios": "import axios from 'axios';\n\naxios.get('/api/user/123')\n.then(response => console.log(response.data))\n.catch(error => console.error(error));",
          "jquery": "$.ajax({\n  url: '/api/user/123',\n  method: 'GET',\n  success: function(data) {\n    console.log(data);\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\n\nOkHttpClient client = new OkHttpClient();\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/user/123\")\n    .addHeader(\"Accept\", \"application/json\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);",
          "spring": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.http.ResponseEntity;\n\nRestTemplate restTemplate = new RestTemplate();\nString url = \"https://yourdomain.com/api/user/123\";\nResponseEntity<String> response = restTemplate.getForEntity(url, String.class);\nSystem.out.println(response.getBody());",
          "httpclient": "import org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpGet request = new HttpGet(\"https://yourdomain.com/api/user/123\");\nrequest.addHeader(\"Accept\", \"application/json\");\n\nString response = EntityUtils.toString(client.execute(request).getEntity());\nSystem.out.println(response);\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"https://yourdomain.com/api/user/123\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}",
          "fasthttp": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"github.com/valyala/fasthttp\"\n)\n\nfunc main() {\n    req := fasthttp.AcquireRequest()\n    resp := fasthttp.AcquireResponse()\n    defer fasthttp.ReleaseRequest(req)\n    defer fasthttp.ReleaseResponse(resp)\n    \n    req.SetRequestURI(\"https://yourdomain.com/api/user/123\")\n    \n    err := fasthttp.Do(req, resp)\n    if err != nil {\n        panic(err)\n    }\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}"
        },
        "php": {
          "curl": "<?php\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user/123');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Accept: application/json'\n]);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->get('https://yourdomain.com/api/user/123', [\n    'headers' => [\n        'Accept' => 'application/json'\n    ]\n]);\n\necho $response->getBody();",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('GET', 'https://yourdomain.com/api/user/123', [\n    'headers' => [\n        'Accept' => 'application/json'\n    ]\n]);\n\necho $response->getContent();"
        },
        "python": {
          "requests": "import requests\n\nresponse = requests.get('https://yourdomain.com/api/user/123')\nprint(response.json())",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    response = client.get('https://yourdomain.com/api/user/123')\n    print(response.json())",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('https://yourdomain.com/api/user/123') as response:\n            data = await response.json()\n            print(data)\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X GET \"https://yourdomain.com/api/user/123\" \\\n  -H \"Accept: application/json\"",
          "verbose": "curl -X GET \"https://yourdomain.com/api/user/123\" \\\n  -H \"Accept: application/json\" \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    },
    {
      "id": "create-user",
      "path": "/api/user",
      "method": "POST",
      "summary": "创建新用户",
      "description": "在系统中创建一个新的用户账户。",
      "parameters": {
        "body": [
          { "name": "name", "type": "string", "required": true, "description": "用户姓名" },
          { "name": "age", "type": "integer", "required": false, "description": "用户年龄" },
          { "name": "email", "type": "string", "required": false, "description": "用户邮箱" }
        ]
      },
      "responses": {
        "200": {
          "description": "用户创建成功",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"id\": 1703123456789,\n    \"name\": \"李四\",\n    \"age\": 28,\n    \"email\": \"lisi@example.com\"\n  }\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "fetch('/api/user', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: '李四',\n    age: 28,\n    email: 'lisi@example.com'\n  })\n})\n.then(response => response.json())\n.then(data => console.log(data));",
          "axios": "import axios from 'axios';\n\naxios.post('/api/user', {\n  name: '李四',\n  age: 28,\n  email: 'lisi@example.com'\n})\n.then(response => console.log(response.data))\n.catch(error => console.error(error));",
          "jquery": "$.ajax({\n  url: '/api/user',\n  method: 'POST',\n  contentType: 'application/json',\n  data: JSON.stringify({\n    name: '李四',\n    age: 28,\n    email: 'lisi@example.com'\n  }),\n  success: function(data) {\n    console.log(data);\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\nimport com.google.gson.Gson;\n\nOkHttpClient client = new OkHttpClient();\nString jsonBody = new Gson().toJson(Map.of(\n    \"name\", \"李四\",\n    \"age\", 28,\n    \"email\", \"lisi@example.com\"\n));\n\nRequestBody body = RequestBody.create(jsonBody, MediaType.parse(\"application/json\"));\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/user\")\n    .post(body)\n    .addHeader(\"Content-Type\", \"application/json\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);",
          "spring": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport java.util.Map;\n\nRestTemplate restTemplate = new RestTemplate();\nHttpHeaders headers = new HttpHeaders();\nheaders.setContentType(MediaType.APPLICATION_JSON);\n\nMap<String, Object> requestBody = Map.of(\n    \"name\", \"李四\",\n    \"age\", 28,\n    \"email\", \"lisi@example.com\"\n);\n\nHttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);\nString response = restTemplate.postForObject(\"https://yourdomain.com/api/user\", request, String.class);\nSystem.out.println(response);",
          "httpclient": "import org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport com.google.gson.Gson;\nimport java.util.Map;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpPost request = new HttpPost(\"https://yourdomain.com/api/user\");\n\nString jsonBody = new Gson().toJson(Map.of(\n    \"name\", \"李四\",\n    \"age\", 28,\n    \"email\", \"lisi@example.com\"\n));\n\nrequest.setEntity(new StringEntity(jsonBody, \"UTF-8\"));\nrequest.setHeader(\"Content-Type\", \"application/json\");\n\nString response = EntityUtils.toString(client.execute(request).getEntity());\nSystem.out.println(response);\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\ntype User struct {\n    Name  string `json:\"name\"`\n    Age   int    `json:\"age\"`\n    Email string `json:\"email\"`\n}\n\nfunc main() {\n    user := User{\n        Name:  \"李四\",\n        Age:   28,\n        Email: \"lisi@example.com\",\n    }\n    \n    jsonData, _ := json.Marshal(user)\n    \n    resp, err := http.Post(\"https://yourdomain.com/api/user\", \n                          \"application/json\", \n                          bytes.NewBuffer(jsonData))\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}",
          "fasthttp": "package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"github.com/valyala/fasthttp\"\n)\n\ntype User struct {\n    Name  string `json:\"name\"`\n    Age   int    `json:\"age\"`\n    Email string `json:\"email\"`\n}\n\nfunc main() {\n    user := User{\n        Name:  \"李四\",\n        Age:   28,\n        Email: \"lisi@example.com\",\n    }\n    \n    jsonData, _ := json.Marshal(user)\n    \n    req := fasthttp.AcquireRequest()\n    resp := fasthttp.AcquireResponse()\n    defer fasthttp.ReleaseRequest(req)\n    defer fasthttp.ReleaseResponse(resp)\n    \n    req.SetRequestURI(\"https://yourdomain.com/api/user\")\n    req.Header.SetMethod(\"POST\")\n    req.Header.SetContentType(\"application/json\")\n    req.SetBody(jsonData)\n    \n    err := fasthttp.Do(req, resp)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Println(string(resp.Body()))\n}"
        },
        "php": {
          "curl": "<?php\n\n$data = [\n    'name' => '李四',\n    'age' => 28,\n    'email' => 'lisi@example.com'\n];\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user');\ncurl_setopt($ch, CURLOPT_POST, true);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type: application/json'\n]);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->post('https://yourdomain.com/api/user', [\n    'json' => [\n        'name' => '李四',\n        'age' => 28,\n        'email' => 'lisi@example.com'\n    ]\n]);\n\necho $response->getBody();",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('POST', 'https://yourdomain.com/api/user', [\n    'json' => [\n        'name' => '李四',\n        'age' => 28,\n        'email' => 'lisi@example.com'\n    ]\n]);\n\necho $response->getContent();"
        },
        "python": {
          "requests": "import requests\n\ndata = {\n    'name': '李四',\n    'age': 28,\n    'email': 'lisi@example.com'\n}\n\nresponse = requests.post('https://yourdomain.com/api/user', json=data)\nprint(response.json())",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    response = client.post('https://yourdomain.com/api/user', json={\n        'name': '李四',\n        'age': 28,\n        'email': 'lisi@example.com'\n    })\n    print(response.json())",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.post('https://yourdomain.com/api/user', json={\n            'name': '李四',\n            'age': 28,\n            'email': 'lisi@example.com'\n        }) as response:\n            data = await response.json()\n            print(data)\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X POST \"https://yourdomain.com/api/user\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"李四\",\n    \"age\": 28,\n    \"email\": \"lisi@example.com\"\n  }'",
          "verbose": "curl -X POST \"https://yourdomain.com/api/user\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"李四\",\n    \"age\": 28,\n    \"email\": \"lisi@example.com\"\n  }' \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    },
    {
      "id": "update-user",
      "path": "/api/user/{id}",
      "method": "PUT",
      "summary": "更新用户信息",
      "description": "完整更新指定用户的信息。",
      "parameters": {
        "path": [
          { "name": "id", "type": "integer", "required": true, "description": "用户ID" }
        ],
        "body": [
          { "name": "name", "type": "string", "required": false, "description": "用户姓名" },
          { "name": "age", "type": "integer", "required": false, "description": "用户年龄" },
          { "name": "email", "type": "string", "required": false, "description": "用户邮箱" }
        ]
      },
      "responses": {
        "200": {
          "description": "用户更新成功",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"id\": 123,\n    \"name\": \"李四\",\n    \"age\": 29,\n    \"email\": \"lisi_new@example.com\"\n  }\n}"
        },
        "404": {
          "description": "用户不存在",
          "example": "{\n  \"code\": 404,\n  \"message\": \"User not found\",\n  \"data\": null\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "fetch('/api/user/123', {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: '李四',\n    age: 29,\n    email: 'lisi_new@example.com'\n  })\n})\n.then(response => response.json())\n.then(data => console.log(data));",
          "axios": "import axios from 'axios';\n\naxios.put('/api/user/123', {\n  name: '李四',\n  age: 29,\n  email: 'lisi_new@example.com'\n})\n.then(response => console.log(response.data))\n.catch(error => console.error(error));",
          "jquery": "$.ajax({\n  url: '/api/user/123',\n  method: 'PUT',\n  contentType: 'application/json',\n  data: JSON.stringify({\n    name: '李四',\n    age: 29,\n    email: 'lisi_new@example.com'\n  }),\n  success: function(data) {\n    console.log(data);\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\nimport com.google.gson.Gson;\n\nOkHttpClient client = new OkHttpClient();\nString jsonBody = new Gson().toJson(Map.of(\n    \"name\", \"李四\",\n    \"age\", 29,\n    \"email\", \"lisi_new@example.com\"\n));\n\nRequestBody body = RequestBody.create(jsonBody, MediaType.parse(\"application/json\"));\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/user/123\")\n    .put(body)\n    .addHeader(\"Content-Type\", \"application/json\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);",
          "spring": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport java.util.Map;\n\nRestTemplate restTemplate = new RestTemplate();\nHttpHeaders headers = new HttpHeaders();\nheaders.setContentType(MediaType.APPLICATION_JSON);\n\nMap<String, Object> requestBody = Map.of(\n    \"name\", \"李四\",\n    \"age\", 29,\n    \"email\", \"lisi_new@example.com\"\n);\n\nHttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);\nString response = restTemplate.postForObject(\"https://yourdomain.com/api/user\", request, String.class);\nSystem.out.println(response);",
          "httpclient": "import org.apache.http.client.methods.HttpPut;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport com.google.gson.Gson;\nimport java.util.Map;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpPut request = new HttpPut(\"https://yourdomain.com/api/user/123\");\n\nString jsonBody = new Gson().toJson(Map.of(\n    \"name\", \"李四\",\n    \"age\", 29,\n    \"email\", \"lisi_new@example.com\"\n));\n\nrequest.setEntity(new StringEntity(jsonBody, \"UTF-8\"));\nrequest.setHeader(\"Content-Type\", \"application/json\");\n\nString response = EntityUtils.toString(client.execute(request).getEntity());\nSystem.out.println(response);\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\ntype UserUpdate struct {\n    Name  string `json:\"name\"`\n    Age   int    `json:\"age\"`\n    Email string `json:\"email\"`\n}\n\nfunc main() {\n    user := UserUpdate{\n        Name:  \"李四\",\n        Age:   29,\n        Email: \"lisi_new@example.com\",\n    }\n    \n    jsonData, _ := json.Marshal(user)\n    \n    req, err := http.NewRequest(\"PUT\", \"https://yourdomain.com/api/user/123\", bytes.NewBuffer(jsonData))\n    if err != nil {\n        panic(err)\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}",
          "fasthttp": "package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"github.com/valyala/fasthttp\"\n)\n\ntype UserUpdate struct {\n    Name  string `json:\"name\"`\n    Age   int    `json:\"age\"`\n    Email string `json:\"email\"`\n}\n\nfunc main() {\n    user := UserUpdate{\n        Name:  \"李四\",\n        Age:   29,\n        Email: \"lisi_new@example.com\",\n    }\n    \n    jsonData, _ := json.Marshal(user)\n    \n    req := fasthttp.AcquireRequest()\n    resp := fasthttp.AcquireResponse()\n    defer fasthttp.ReleaseRequest(req)\n    defer fasthttp.ReleaseResponse(resp)\n    \n    req.SetRequestURI(\"https://yourdomain.com/api/user/123\")\n    req.Header.SetMethod(\"PUT\")\n    req.Header.SetContentType(\"application/json\")\n    req.SetBody(jsonData)\n    \n    err := fasthttp.Do(req, resp)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Println(string(resp.Body()))\n}"
        },
        "php": {
          "curl": "<?php\n\n$data = [\n    'name' => '李四',\n    'age' => 29,\n    'email' => 'lisi_new@example.com'\n];\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user/123');\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type: application/json'\n]);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->put('https://yourdomain.com/api/user/123', [\n    'json' => [\n        'name' => '李四',\n        'age' => 29,\n        'email' => 'lisi_new@example.com'\n    ]\n]);\n\necho $response->getBody();",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('PUT', 'https://yourdomain.com/api/user/123', [\n    'json' => [\n        'name' => '李四',\n        'age' => 29,\n        'email' => 'lisi_new@example.com'\n    ]\n]);\n\necho $response->getContent();"
        },
        "python": {
          "requests": "import requests\n\ndata = {\n    'name': '李四',\n    'age': 29,\n    'email': 'lisi_new@example.com'\n}\n\nresponse = requests.put('https://yourdomain.com/api/user/123', json=data)\nprint(response.json())",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    response = client.put('https://yourdomain.com/api/user/123', json={\n        'name': '李四',\n        'age': 29,\n        'email': 'lisi_new@example.com'\n    })\n    print(response.json())",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.put('https://yourdomain.com/api/user/123', json={\n            'name': '李四',\n            'age': 29,\n            'email': 'lisi_new@example.com'\n        }) as response:\n            data = await response.json()\n            print(data)\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X PUT \"https://yourdomain.com/api/user/123\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"李四\",\n    \"age\": 29,\n    \"email\": \"lisi_new@example.com\"\n  }'",
          "verbose": "curl -X PUT \"https://yourdomain.com/api/user/123\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"李四\",\n    \"age\": 29,\n    \"email\": \"lisi_new@example.com\"\n  }' \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    },
    {
      "id": "patch-user",
      "path": "/api/user/{id}",
      "method": "PATCH",
      "summary": "部分更新用户",
      "description": "部分更新指定用户的信息。",
      "parameters": {
        "path": [
          { "name": "id", "type": "integer", "required": true, "description": "用户ID" }
        ],
        "body": [
          { "name": "name", "type": "string", "required": false, "description": "用户姓名" },
          { "name": "age", "type": "integer", "required": false, "description": "用户年龄" },
          { "name": "email", "type": "string", "required": false, "description": "用户邮箱" }
        ]
      },
      "responses": {
        "200": {
          "description": "用户更新成功",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"id\": 123,\n    \"name\": \"李四\",\n    \"age\": 25,\n    \"email\": \"lisi@example.com\"\n  }\n}"
        },
        "404": {
          "description": "用户不存在",
          "example": "{\n  \"code\": 404,\n  \"message\": \"User not found\",\n  \"data\": null\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "fetch('/api/user/123', {\n  method: 'PATCH',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    balance: 1200.00\n  })\n})\n.then(response => response.json())\n.then(data => console.log(data));",
          "axios": "import axios from 'axios';\n\naxios.patch('/api/user/123', {\n  balance: 1200.00\n})\n.then(response => console.log(response.data))\n.catch(error => console.error(error));",
          "jquery": "$.ajax({\n  url: '/api/user/123',\n  method: 'PATCH',\n  contentType: 'application/json',\n  data: JSON.stringify({\n    balance: 1200.00\n  }),\n  success: function(data) {\n    console.log(data);\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\nimport com.google.gson.Gson;\n\nOkHttpClient client = new OkHttpClient();\nString jsonBody = new Gson().toJson(Map.of(\n    \"balance\", 1200.00\n));\n\nRequestBody body = RequestBody.create(jsonBody, MediaType.parse(\"application/json\"));\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/user/123\")\n    .patch(body)\n    .addHeader(\"Content-Type\", \"application/json\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);",
          "spring": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport java.util.Map;\n\nRestTemplate restTemplate = new RestTemplate();\nHttpHeaders headers = new HttpHeaders();\nheaders.setContentType(MediaType.APPLICATION_JSON);\n\nMap<String, Object> requestBody = Map.of(\n    \"balance\", 1200.00\n);\n\nHttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);\nString response = restTemplate.exchange(\"https://yourdomain.com/api/user/123\", \n                                       org.springframework.http.HttpMethod.PATCH, \n                                       request, \n                                       String.class).getBody();\nSystem.out.println(response);",
          "httpclient": "import org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport com.google.gson.Gson;\nimport java.util.Map;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpPatch request = new HttpPatch(\"https://yourdomain.com/api/user/123\");\n\nString jsonBody = new Gson().toJson(Map.of(\n    \"balance\", 1200.00\n));\n\nrequest.setEntity(new StringEntity(jsonBody, \"UTF-8\"));\nrequest.setHeader(\"Content-Type\", \"application/json\");\n\nString response = EntityUtils.toString(client.execute(request).getEntity());\nSystem.out.println(response);\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\ntype UserPatch struct {\n    Balance float64 `json:\"balance\"`\n}\n\nfunc main() {\n    user := UserPatch{\n        Balance: 1200.00,\n    }\n    \n    jsonData, _ := json.Marshal(user)\n    \n    req, err := http.NewRequest(\"PATCH\", \"https://yourdomain.com/api/user/123\", bytes.NewBuffer(jsonData))\n    if err != nil {\n        panic(err)\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}",
          "fasthttp": "package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"github.com/valyala/fasthttp\"\n)\n\ntype UserPatch struct {\n    Balance float64 `json:\"balance\"`\n}\n\nfunc main() {\n    user := UserPatch{\n        Balance: 1200.00,\n    }\n    \n    jsonData, _ := json.Marshal(user)\n    \n    req := fasthttp.AcquireRequest()\n    resp := fasthttp.AcquireResponse()\n    defer fasthttp.ReleaseRequest(req)\n    defer fasthttp.ReleaseResponse(resp)\n    \n    req.SetRequestURI(\"https://yourdomain.com/api/user/123\")\n    req.Header.SetMethod(\"PATCH\")\n    req.Header.SetContentType(\"application/json\")\n    req.SetBody(jsonData)\n    \n    err := fasthttp.Do(req, resp)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Println(string(resp.Body()))\n}"
        },
        "php": {
          "curl": "<?php\n\n$data = [\n    'balance' => 1200.00\n];\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user/123');\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type: application/json'\n]);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->patch('https://yourdomain.com/api/user/123', [\n    'json' => [\n        'balance' => 1200.00\n    ]\n]);\n\necho $response->getBody();",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('PATCH', 'https://yourdomain.com/api/user/123', [\n    'json' => [\n        'balance' => 1200.00\n    ]\n]);\n\necho $response->getContent();"
        },
        "python": {
          "requests": "import requests\n\ndata = {'balance': 1200.00}\n\nresponse = requests.patch('https://yourdomain.com/api/user/123', json=data)\nprint(response.json())",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    response = client.patch('https://yourdomain.com/api/user/123', json={\n        'balance': 1200.00\n    })\n    print(response.json())",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.patch('https://yourdomain.com/api/user/123', json={\n            'balance': 1200.00\n        }) as response:\n            data = await response.json()\n            print(data)\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X PATCH \"https://yourdomain.com/api/user/123\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"balance\": 1200.00}'",
          "verbose": "curl -X PATCH \"https://yourdomain.com/api/user/123\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"balance\": 1200.00}' \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    },
    {
      "id": "delete-user",
      "path": "/api/user/{id}",
      "method": "DELETE",
      "summary": "删除用户",
      "description": "删除指定的用户账户。",
      "parameters": {
        "path": [
          { "name": "id", "type": "integer", "required": true, "description": "用户ID" }
        ]
      },
      "responses": {
        "200": {
          "description": "用户删除成功",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"message\": \"User 123 deleted successfully\"\n  }\n}"
        },
        "404": {
          "description": "用户不存在",
          "example": "{\n  \"code\": 404,\n  \"message\": \"User not found\",\n  \"data\": null\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "fetch('/api/user/123', {\n  method: 'DELETE'\n})\n.then(response => response.json())\n.then(data => console.log(data));",
          "axios": "import axios from 'axios';\n\naxios.delete('/api/user/123')\n.then(response => console.log(response.data))\n.catch(error => console.error(error));",
          "jquery": "$.ajax({\n  url: '/api/user/123',\n  method: 'DELETE',\n  success: function(data) {\n    console.log(data);\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\n\nOkHttpClient client = new OkHttpClient();\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/user/123\")\n    .delete()\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);",
          "spring": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\n\nRestTemplate restTemplate = new RestTemplate();\nHttpHeaders headers = new HttpHeaders();\nHttpEntity<String> request = new HttpEntity<>(headers);\nString response = restTemplate.exchange(\"https://yourdomain.com/api/user/123\", \n                                       org.springframework.http.HttpMethod.DELETE, \n                                       request, \n                                       String.class).getBody();\nSystem.out.println(response);",
          "httpclient": "import org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpDelete request = new HttpDelete(\"https://yourdomain.com/api/user/123\");\n\nString response = EntityUtils.toString(client.execute(request).getEntity());\nSystem.out.println(response);\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    req, err := http.NewRequest(\"DELETE\", \"https://yourdomain.com/api/user/123\", nil)\n    if err != nil {\n        panic(err)\n    }\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}"
        },
        "php": {
          "curl": "<?php\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user/123');\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->delete('https://yourdomain.com/api/user/123');\n\necho $response->getBody();",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('DELETE', 'https://yourdomain.com/api/user/123');\n\necho $response->getContent();"
        },
        "python": {
          "requests": "import requests\n\nresponse = requests.delete('https://yourdomain.com/api/user/123')\nprint(response.json())",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    response = client.delete('https://yourdomain.com/api/user/123')\n    print(response.json())",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.delete('https://yourdomain.com/api/user/123') as response:\n            data = await response.json()\n            print(data)\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X DELETE \"https://yourdomain.com/api/user/123\"",
          "verbose": "curl -X DELETE \"https://yourdomain.com/api/user/123\" \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    },
    {
      "id": "upload-file",
      "path": "/api/upload",
      "method": "POST",
      "summary": "文件上传",
      "description": "上传文件到服务器，支持多种文件格式。",
      "parameters": {
        "body": [
          { "name": "file", "type": "file", "required": true, "description": "要上传的文件" }
        ]
      },
      "responses": {
        "200": {
          "description": "文件上传成功",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"name\": \"document.pdf\",\n    \"type\": \"application/pdf\",\n    \"size\": 1024000,\n    \"md5\": \"5d41402abc4b2a76b9719d911017c592\"\n  }\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "const formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formData\n})\n.then(response => response.json())\n.then(data => console.log(data));",
          "axios": "import axios from 'axios';\n\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\naxios.post('/api/upload', formData, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n})\n.then(response => console.log(response.data))\n.catch(error => console.error(error));",
          "jquery": "$.ajax({\n  url: '/api/upload',\n  method: 'POST',\n  data: new FormData($('#fileInput')[0]),\n  processData: false,\n  contentType: false,\n  success: function(data) {\n    console.log(data);\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\nimport java.io.File;\n\nOkHttpClient client = new OkHttpClient();\nRequestBody requestBody = new MultipartBody.Builder()\n    .setType(MultipartBody.FORM)\n    .addFormDataPart(\"file\", file.getName(),\n        RequestBody.create(file, MediaType.parse(\"application/pdf\")))\n    .build();\n\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/upload\")\n    .post(requestBody)\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);",
          "spring": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.core.io.FileSystemResource;\nimport java.io.File;\n\nRestTemplate restTemplate = new RestTemplate();\nHttpHeaders headers = new HttpHeaders();\nheaders.setContentType(MediaType.MULTIPART_FORM_DATA);\n\nMultiValueMap<String, Object> body = new LinkedMultiValueMap<>();\nbody.add(\"file\", new FileSystemResource(new File(\"document.pdf\")));\n\nHttpEntity<MultiValueMap<String, Object>> request = new HttpEntity<>(body, headers);\nString response = restTemplate.postForObject(\"https://yourdomain.com/api/upload\", request, String.class);\nSystem.out.println(response);",
          "httpclient": "import org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport java.io.File;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpPost request = new HttpPost(\"https://yourdomain.com/api/upload\");\n\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addBinaryBody(\"file\", new File(\"document.pdf\"));\nrequest.setEntity(builder.build());\n\nString response = EntityUtils.toString(client.execute(request).getEntity());\nSystem.out.println(response);\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    file, err := os.Open(\"document.pdf\")\n    if err != nil {\n        panic(err)\n    }\n    defer file.Close()\n    \n    var buf bytes.Buffer\n    writer := multipart.NewWriter(&buf)\n    \n    part, err := writer.CreateFormFile(\"file\", \"document.pdf\")\n    if err != nil {\n        panic(err)\n    }\n    \n    _, err = io.Copy(part, file)\n    if err != nil {\n        panic(err)\n    }\n    writer.Close()\n    \n    resp, err := http.Post(\"https://yourdomain.com/api/upload\", \n                          writer.FormDataContentType(), \n                          &buf)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}",
          "fasthttp": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"github.com/valyala/fasthttp\"\n)\n\nfunc main() {\n    file, err := os.Open(\"document.pdf\")\n    if err != nil {\n        panic(err)\n    }\n    defer file.Close()\n    \n    var buf bytes.Buffer\n    writer := multipart.NewWriter(&buf)\n    \n    part, err := writer.CreateFormFile(\"file\", \"document.pdf\")\n    if err != nil {\n        panic(err)\n    }\n    \n    _, err = io.Copy(part, file)\n    if err != nil {\n        panic(err)\n    }\n    writer.Close()\n    \n    req := fasthttp.AcquireRequest()\n    resp := fasthttp.AcquireResponse()\n    defer fasthttp.ReleaseRequest(req)\n    defer fasthttp.ReleaseResponse(resp)\n    \n    req.SetRequestURI(\"https://yourdomain.com/api/upload\")\n    req.Header.SetMethod(\"POST\")\n    req.Header.SetContentType(writer.FormDataContentType())\n    req.SetBody(buf.Bytes())\n    \n    err = fasthttp.Do(req, resp)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Println(string(resp.Body()))\n}"
        },
        "php": {
          "curl": "<?php\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/upload');\ncurl_setopt($ch, CURLOPT_POST, true);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, [\n    'file' => new CURLFile('document.pdf')\n]);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->post('https://yourdomain.com/api/upload', [\n    'multipart' => [\n        [\n            'name' => 'file',\n            'contents' => fopen('document.pdf', 'r')\n        ]\n    ]\n]);\n\necho $response->getBody();",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('POST', 'https://yourdomain.com/api/upload', [\n    'extra' => [\n        'curl' => [\n            CURLOPT_POSTFIELDS => [\n                'file' => new \\CURLFile('document.pdf')\n            ]\n        ]\n    ]\n]);\n\necho $response->getContent();"
        },
        "python": {
          "requests": "import requests\n\nfiles = {'file': open('document.pdf', 'rb')}\n\nresponse = requests.post('https://yourdomain.com/api/upload', files=files)\nprint(response.json())",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    with open('document.pdf', 'rb') as f:\n        files = {'file': f}\n        response = client.post('https://yourdomain.com/api/upload', files=files)\n        print(response.json())",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        with open('document.pdf', 'rb') as f:\n            data = aiohttp.FormData()\n            data.add_field('file', f, filename='document.pdf')\n            async with session.post('https://yourdomain.com/api/upload', data=data) as response:\n                result = await response.json()\n                print(result)\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X POST \"https://yourdomain.com/api/upload\" \\\n  -F \"file=@document.pdf\"",
          "verbose": "curl -X POST \"https://yourdomain.com/api/upload\" \\\n  -F \"file=@document.pdf\" \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    },
    {
      "id": "download-file",
      "path": "/api/download/{id}",
      "method": "GET",
      "summary": "文件下载",
      "description": "根据文件ID下载文件。",
      "parameters": {
        "path": [
          { "name": "id", "type": "integer", "required": true, "description": "文件ID (1-6)" }
        ]
      },
      "responses": {
        "200": {
          "description": "文件下载成功",
          "example": "二进制文件内容"
        },
        "404": {
          "description": "文件不存在",
          "example": "{\n  \"code\": 404,\n  \"message\": \"File not found\",\n  \"data\": null\n}"
        }
      },
      "codeSamples": {
        "javascript": {
          "fetch": "fetch('/api/download/1')\n  .then(response => response.blob())\n  .then(blob => {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'downloaded_file';\n    a.click();\n  });",
          "axios": "import axios from 'axios';\n\naxios.get('/api/download/1', {\n  responseType: 'blob'\n})\n.then(response => {\n  const url = window.URL.createObjectURL(response.data);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'downloaded_file';\n  a.click();\n})\n.catch(error => console.error(error));",
          "jquery": "$.ajax({\n  url: '/api/download/1',\n  method: 'GET',\n  xhrFields: {\n    responseType: 'blob'\n  },\n  success: function(blob) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'downloaded_file';\n    a.click();\n  },\n  error: function(xhr, status, error) {\n    console.error(error);\n  }\n});"
        },
        "java": {
          "okhttp": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nOkHttpClient client = new OkHttpClient();\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/download/1\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nif (response.isSuccessful()) {\n    try (FileOutputStream fos = new FileOutputStream(\"downloaded_file\")) {\n        fos.write(response.body().bytes());\n    }\n    System.out.println(\"文件下载成功\");\n}",
          "spring": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.http.ResponseEntity;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nRestTemplate restTemplate = new RestTemplate();\nResponseEntity<byte[]> response = restTemplate.getForEntity(\"https://yourdomain.com/api/download/1\", byte[].class);\n\nif (response.getStatusCode().is2xxSuccessful()) {\n    try (FileOutputStream fos = new FileOutputStream(\"downloaded_file\")) {\n        fos.write(response.getBody());\n    }\n    System.out.println(\"文件下载成功\");\n}",
          "httpclient": "import org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nCloseableHttpClient client = HttpClients.createDefault();\nHttpGet request = new HttpGet(\"https://yourdomain.com/api/download/1\");\n\nbyte[] response = EntityUtils.toByteArray(client.execute(request).getEntity());\ntry (FileOutputStream fos = new FileOutputStream(\"downloaded_file\")) {\n    fos.write(response);\n}\nSystem.out.println(\"文件下载成功\");\nclient.close();"
        },
        "go": {
          "nethttp": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"https://yourdomain.com/api/download/1\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}",
          "fasthttp": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"github.com/valyala/fasthttp\"\n)\n\nfunc main() {\n    req := fasthttp.AcquireRequest()\n    resp := fasthttp.AcquireResponse()\n    defer fasthttp.ReleaseRequest(req)\n    defer fasthttp.ReleaseResponse(resp)\n    \n    req.SetRequestURI(\"https://yourdomain.com/api/download/1\")\n    \n    err := fasthttp.Do(req, resp)\n    if err != nil {\n        panic(err)\n    }\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}"
        },
        "php": {
          "curl": "<?php\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/download/1');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\nfile_put_contents('downloaded_file', $response);\necho \"文件下载成功\";",
          "guzzle": "<?php\n\nuse GuzzleHttp\\Client;\n\n$client = new Client();\n$response = $client->get('https://yourdomain.com/api/download/1');\n\nfile_put_contents('downloaded_file', $response->getBody());\necho \"文件下载成功\";",
          "symfony": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$client = HttpClient::create();\n$response = $client->request('GET', 'https://yourdomain.com/api/download/1');\n\nfile_put_contents('downloaded_file', $response->getContent());\necho \"文件下载成功\";"
        },
        "python": {
          "requests": "import requests\n\nresponse = requests.get('https://yourdomain.com/api/download/1')\nwith open('downloaded_file', 'wb') as f:\n    f.write(response.content)\nprint(\"文件下载成功\")",
          "httpx": "import httpx\n\nwith httpx.Client() as client:\n    response = client.get('https://yourdomain.com/api/download/1')\n    with open('downloaded_file', 'wb') as f:\n        f.write(response.content)\n    print(\"文件下载成功\")",
          "aiohttp": "import aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('https://yourdomain.com/api/download/1') as response:\n            content = await response.read()\n            with open('downloaded_file', 'wb') as f:\n                f.write(content)\n            print(\"文件下载成功\")\n\nasyncio.run(main())"
        },
        "curl": {
          "basic": "curl -X GET \"https://yourdomain.com/api/download/1\" \\\n  -o downloaded_file",
          "verbose": "curl -X GET \"https://yourdomain.com/api/download/1\" \\\n  -o downloaded_file \\\n  -v \\\n  -w \"\\nTime: %{time_total}s\\nStatus: %{http_code}\\n\""
        }
      }
    }
  ],
  "methodColors": {
    "GET": "#22c55e",
    "POST": "#3b82f6",
    "PUT": "#f59e0b",
    "PATCH": "#8b5cf6",
    "DELETE": "#ef4444"
  }
} 