{
  "apiDefinitions": [
    {
      "id": "get-users",
      "path": "/api/user",
      "method": "GET",
      "summary": "获取用户列表",
      "description": "获取系统中所有用户的列表信息，支持分页和筛选。支持 HTTP 和 SSE 两种协议。",
      "parameters": {
        "query": [
          { "name": "page", "type": "integer", "required": false, "description": "页码，默认为1" },
          { "name": "size", "type": "integer", "required": false, "description": "每页数量，默认为10" },
          { "name": "name", "type": "string", "required": false, "description": "按姓名筛选" },
          { "name": "email", "type": "string", "required": false, "description": "按邮箱筛选" },
          { "name": "mobile", "type": "string", "required": false, "description": "按手机号筛选" }
        ],
        "headers": [
          { "name": "Accept", "type": "string", "required": false, "description": "application/json 或 text/event-stream" }
        ]
      },
      "responses": {
        "200": {
          "description": "成功返回用户列表",
          "example": "{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {\n    \"results\": [\n      {\n        \"id\": 1,\n        \"name\": \"张三\",\n        \"age\": 25,\n        \"email\": \"zhangsan@example.com\",\n        \"mobile\": \"13800138000\",\n        \"balance\": 1000.50,\n        \"is_active\": 1,\n        \"address\": {\n          \"id\": 1,\n          \"province\": \"北京市\",\n          \"city\": \"北京市\",\n          \"district\": \"朝阳区\",\n          \"street\": \"三里屯街道\",\n          \"user_id\": \"1\"\n        }\n      }\n    ],\n    \"total\": 100,\n    \"page\": 1,\n    \"size\": 10\n  }\n}"
        }
      },
      "codeSamples": {
        "javascript": "// HTTP 请求\nfetch('/api/user?page=1&size=10')\n  .then(response => response.json())\n  .then(data => console.log(data));\n\n// SSE 请求\nconst eventSource = new EventSource('/api/user');\neventSource.onmessage = function(event) {\n  const userData = JSON.parse(event.data);\n  console.log('收到用户数据:', userData);\n};",
        "java": "// HTTP 请求 (OkHttp)\nimport okhttp3.*;\nimport com.google.gson.Gson;\n\nOkHttpClient client = new OkHttpClient();\nRequest request = new Request.Builder()\n    .url(\"https://yourdomain.com/api/user?page=1&size=10\")\n    .addHeader(\"Accept\", \"application/json\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nString jsonData = response.body().string();\nSystem.out.println(jsonData);\n\n// HTTP 请求 (HttpRequest - Java 11+)\nHttpRequest request = HttpRequest.newBuilder()\n    .uri(URI.create(\"https://yourdomain.com/api/user?page=1&size=10\"))\n    .header(\"Accept\", \"application/json\")\n    .GET()\n    .build();\n\nHttpResponse<String> response = HttpClient.newHttpClient()\n    .send(request, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(response.body());\n\n// SSE 请求 (Java 11+)\nHttpRequest sseRequest = HttpRequest.newBuilder()\n    .uri(URI.create(\"https://yourdomain.com/api/user\"))\n    .header(\"Accept\", \"text/event-stream\")\n    .GET()\n    .build();\n\nHttpClient.newHttpClient()\n    .send(sseRequest, HttpResponse.BodyHandlers.ofLines())\n    .body()\n    .forEach(line -> {\n        if (line.startsWith(\"data: \")) {\n            System.out.println(line.substring(6));\n        }\n    });",
        "go": "package main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n    \"bufio\"\n)\n\n// HTTP 请求\nfunc httpRequest() {\n    resp, err := http.Get(\"https://yourdomain.com/api/user?page=1&size=10\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(body))\n}\n\n// SSE 请求\nfunc sseRequest() {\n    req, err := http.NewRequest(\"GET\", \"https://yourdomain.com/api/user\", nil)\n    if err != nil {\n        panic(err)\n    }\n    req.Header.Set(\"Accept\", \"text/event-stream\")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    reader := bufio.NewReader(resp.Body)\n    for {\n        line, err := reader.ReadString('\\n')\n        if err != nil {\n            break\n        }\n        if len(line) > 6 && line[:6] == \"data: \" {\n            fmt.Println(line[6:])\n        }\n    }\n}",
        "php": "<?php\n\n// HTTP 请求 (cURL)\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user?page=1&size=10');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Accept: application/json'\n]);\n\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;\n\n// HTTP 请求 (file_get_contents)\n$context = stream_context_create([\n    'http' => [\n        'header' => 'Accept: application/json'\n    ]\n]);\n\n$response = file_get_contents('https://yourdomain.com/api/user?page=1&size=10', false, $context);\necho $response;\n\n// SSE 请求\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'https://yourdomain.com/api/user');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Accept: text/event-stream'\n]);\ncurl_setopt($ch, CURLOPT_WRITEFUNCTION, function($ch, $data) {\n    $lines = explode(\"\\n\", $data);\n    foreach ($lines as $line) {\n        if (strpos($line, 'data: ') === 0) {\n            echo substr($line, 6) . \"\\n\";\n        }\n    }\n    return strlen($data);\n});\n\ncurl_exec($ch);\ncurl_close($ch);",
        "python": "import requests\n\n# HTTP 请求\nresponse = requests.get('https://yourdomain.com/api/user', {\n    'page': 1,\n    'size': 10\n})\nprint(response.json())\n\n# SSE 请求\nresponse = requests.get('https://yourdomain.com/api/user', \n                       headers={'Accept': 'text/event-stream'}, \n                       stream=True)\nfor line in response.iter_lines():\n    if line.startswith(b'data: '):\n        print(line[6:])",
        "curl": "# HTTP 请求\ncurl -X GET \"https://yourdomain.com/api/user?page=1&size=10\" \\\n  -H \"Accept: application/json\"\n\n# SSE 请求\ncurl -X GET \"https://yourdomain.com/api/user\" \\\n  -H \"Accept: text/event-stream\" \\\n  -N"
      }
    }
  ],
  "availableFiles": {
    "1": "picture_1.png",
    "2": "picture_2.png",
    "3": "picture_3.png",
    "4": "picture_4.png",
    "5": "video_1.mp4",
    "6": "video_2.mp4"
  },
  "protocolInfo": {
    "http": {
      "name": "HTTP 协议",
      "description": "标准的 RESTful API 调用，返回 JSON 格式数据。",
      "usage": "设置 Accept: application/json 或不设置 Accept 头"
    },
    "sse": {
      "name": "SSE (Server-Sent Events) 协议",
      "description": "实时数据流推送，适用于需要实时更新的场景。",
      "usage": "设置 Accept: text/event-stream"
    }
  },
  "tableStructures": {
    "t_user": {
      "name": "用户表",
      "fields": [
        { "name": "id", "type": "INTEGER", "description": "用户ID，主键" },
        { "name": "name", "type": "TEXT", "description": "用户姓名" },
        { "name": "age", "type": "INTEGER", "description": "用户年龄" },
        { "name": "email", "type": "TEXT", "description": "用户邮箱，唯一" },
        { "name": "mobile", "type": "TEXT", "description": "手机号码" },
        { "name": "balance", "type": "REAL", "description": "账户余额" },
        { "name": "is_active", "type": "INTEGER", "description": "是否激活 (0或1)" }
      ]
    },
    "t_address": {
      "name": "地址表",
      "fields": [
        { "name": "id", "type": "INTEGER", "description": "地址ID，主键" },
        { "name": "province", "type": "TEXT", "description": "省份" },
        { "name": "city", "type": "TEXT", "description": "城市" },
        { "name": "district", "type": "TEXT", "description": "区县" },
        { "name": "street", "type": "TEXT", "description": "街道" },
        { "name": "user_id", "type": "INTEGER", "description": "关联用户ID，外键" }
      ]
    }
  },
  "methodColors": {
    "GET": "#22c55e",
    "POST": "#3b82f6",
    "PUT": "#f59e0b",
    "PATCH": "#8b5cf6",
    "DELETE": "#ef4444"
  }
} 